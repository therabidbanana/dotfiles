set encoding=utf-8

let g:Powerline_symbols = 'fancy'
let g:Powerline_colorscheme='skwp'
" Loaded after .vimrc, so anything in here will override the .vimrc settings

set scrolloff=8 "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

set colorcolumn=80
highlight ColorColumn ctermbg=0

" User preferences
" -----------------------------------------------------------------------------
let mapleader = ','

" User plugin configurations
" -----------------------------------------------------------------------------
let g:yankring_history_dir=$HOME.'/.vim/tmp/yankring/'
" let g:MarkdownPreviewUserStyles=$HOME.'/path/to/user/styles/'
" let g:RefreshRunningBrowserDefault = 'chrome'
" let g:snips_author = 'Your Name'


" User key mapping
" -----------------------------------------------------------------------------
"
" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

nnoremap ` '
nnoremap ' `


" Lazy escape calls:
" inoremap jj <ESC>
" inoremap jk <Esc>
" vnoremap <Del> <esc>
" noremap! <Del> <esc>
" noremap <Del> <esc>
" snoremap <Del> <esc>
" vnoremap <S-Del> <esc>
" noremap! <S-Del> <esc>
" noremap <S-Del> <esc>
" snoremap <S-Del> <esc>

" Paste toggle
map <F2> <Esc>:set paste!<cr>i
inoremap <F2> <Esc>
set pastetoggle=<F2>



" User leader mapping
" -----------------------------------------------------------------------------
" Support with vimux
ruby << EOF
class Object
  def flush; end unless Object.new.respond_to?(:flush)
end
EOF
" Run the current file with rspec
map <Leader>rb :wa<CR>:call RunVimTmuxCommand("clear; rspec " . bufname("%") . ";")<CR>

" Prompt for a command to run
map <Leader>rp :wa<CR>:PromptVimTmuxCommand<CR>
"
" " Run last command executed by RunVimTmuxCommand
map <Leader>rl :wa<CR>:RunLastVimTmuxCommand<CR>
"
" " Inspect runner pane
map <Leader>ri :wa<CR>:InspectVimTmuxRunner<CR>
"
" " Close all other tmux panes in current window
map <Leader>rx :CloseVimTmuxPanes<CR>
"
" " Close vim tmux runner opened by RunVimTmuxCommand
map <Leader>rq :CloseVimTmuxRunner<CR>
"
" " Interrupt any command running in the runner pane
map <Leader>rs :InterruptVimTmuxRunner<CR>
" " Interrupt any command running in the runner pane
map <Leader>rr :InterruptVimTmuxRunner<CR>:wa<CR>:RunLastVimTmuxCommand<CR>

" Git Status toggle
map <Leader>g :Gstatus<CR>

" NerdTree Toggle
map <leader>n :NERDTreeToggle<cr>

" YankRing Setup
nnoremap <leader>y :YRShow<cr>

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

let g:ctrlp_map = '<Leader>f'
let g:ctrlp_custom_ignore = 'vendor/dtime_api'
map <silent> <Leader>b :LustyJuggler<CR>
" map <silent> <Leader>b :CtrlPBuffer<CR>
" nnoremap <silent> <F3> :TlistToggle<cr>
" ino <silent> <F5> <c-r>=ShowAvailableSnips()<cr>

" let g:no_turbux_mappings = 'true'
" nmap <leader>r <Plug>SendTestToTmux
" nmap <leader>R <Plug>SendFocusedTestToTmux


" User file type utility settings
" -----------------------------------------------------------------------------


" User file handling and settings
" -----------------------------------------------------------------------------


" User themes and GUI settings
" -----------------------------------------------------------------------------

" colorscheme colorblind
" colorscheme bloodshot
" colorscheme cataracts
" colorscheme snowblind

let g:solarized_contrast="high"
" let g:solarized_termtrans=1
" let g:solarized_termcolors=256
set background=dark
set visualbell
colorscheme solarized


" User GUI specific settings (could be in .gvimrc.local)
" -----------------------------------------------------------------------------
if has('gui_running')
  set guioptions=aAce
  set guifont=Monaco:h13
endif

" Super split navigation
" ------------------------

" Move between splits
map <silent><C-h> <Esc>:call SplitMove("h")<CR>
map <silent><C-j> <Esc>:call SplitMove("j")<CR>
map <silent><C-k> <Esc>:call SplitMove("k")<CR>
map <silent><C-l> <Esc>:call SplitMove("l")<CR>

func! IsMostDirection(letter)
  let oldw = winnr()
  silent! exe "normal! \<c-w>".a:letter
  let neww = winnr()
  silent! exe oldw.'wincmd w'
  return oldw == neww
endfunction

func! SplitMove(letter)
  if IsMostDirection(a:letter)
    if a:letter == "j"
      call system("tmux select-pane -D")
    elseif a:letter == 'k'
      call system("tmux select-pane -U")
    elseif a:letter == 'h'
      call system("tmux select-pane -L")
    elseif a:letter == 'l'
      call system("tmux select-pane -R")
    endif
  else
    silent! exe "silent! normal! \<C-w>".a:letter
  endif
endfunction
" map <C-k> <C-w>k



" Arrow key remapping: Up/Dn = move line up/dn; Left/Right = indent/unindent
function! SetArrowKeysAsTextShifters()
    " normal mode
    nmap <silent> <Left> <<
    nmap <silent> <Right> >>
    nnoremap <silent> <Up> :m-2<CR>==
    nnoremap <silent> <Down> :m+<CR>==
    vnoremap <silent> <Up> :m-2<CR>gv=gv
    vnoremap <silent> <Down> :m'>+<CR>gv=gv

    " visual mode
    vmap <silent> <Left> <
    vmap <silent> <Right> >

    " insert mode
    imap <silent> <Left> <C-D>
    imap <silent> <Right> <C-T>

    " disable modified versions we are not using
    " nnoremap  <S-Up>     <NOP>
    " nnoremap  <S-Down>   <NOP>
    " nnoremap  <S-Left>   <NOP>
    " nnoremap  <S-Right>  <NOP>
    " vnoremap  <S-Up>     <NOP>
    " vnoremap  <S-Down>   <NOP>
    " vnoremap  <S-Left>   <NOP>
    " vnoremap  <S-Right>  <NOP>
    " inoremap  <S-Up>     <NOP>
    " inoremap  <S-Down>   <NOP>
    " inoremap  <S-Left>   <NOP>
    " inoremap  <S-Right>  <NOP>
endfunction
call SetArrowKeysAsTextShifters()

" custom tab pages line with tab numbers - modified version of script by JonSkanes
" http://vim.wikia.com/index.php?title=Show_tab_number_in_your_tab_line&oldid=29439
hi TabLineFill cterm=none ctermfg=234 ctermbg=234
hi TabLine cterm=none ctermfg=245 ctermbg=236
hi TabLineSel cterm=none ctermfg=234 ctermbg=33
hi TabLineEnd cterm=none ctermfg=236 ctermbg=234
hi TabLineSelStart cterm=none ctermfg=236 ctermbg=33
hi TabLineSelEnd cterm=none ctermfg=33 ctermbg=236
hi TabLineEndSelEnd cterm=none ctermfg=33 ctermbg=234
set tabline=%!MyTabLine()
function! MyTabLine()
  let s = ''
  let t = tabpagenr()
  let i = 1
  let len = tabpagenr('$')
  while i <= len
    let buflist = tabpagebuflist(i)
    let winnr = tabpagewinnr(i)
    let s .= '%#TabLine#'
    if i != 1
      if i == t
        let s .= ' %#TabLineSelStart#'
      elseif i-1 != t
        let s .= ' |'
      endif
    endif
    let s .= (i == t ? '%#TabLineSel# ' : '%#TabLine# ')
    " set the tab page number (for mouse clicks)
    let s .= '%' . i . 'T'
    " set page number string
    let s .=  i . ' '
    if i == t
      let s .= '| '
    endif
    let m = 0 " &modified counter
    let bufnr = buflist[winnr - 1]
    let file = bufname(bufnr)
    let buftype = getbufvar(bufnr, 'buftype')
    if buftype == 'nofile'
      if file =~ '\/.'
        let file = substitute(file, '.*\/\ze.', '', '')
      endif
    else
      let file = fnamemodify(file, ':p:t')
    endif
    if file == ''
      let file = '[No Name]'
    endif
    for b in buflist
      " check and ++ tab's &modified count
      if getbufvar( b, "&modified" )
        let m += 1
      endif
    endfor
    if m > 0
      let s.= '[+]'
    endif
    let s .= file
    if i == t
      if i == len
        let s .= ' %#TabLineEndSelEnd#'
      else
        let s .= ' %#TabLineSelEnd#'
      endif
    endif
    let i = i + 1
  endwhile
  if i-1 != t
    let s .= ' %#TabLineEnd# '
  endif
  let s .= '%T%#TabLineFill#%='
  let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
  return s
endfunction
